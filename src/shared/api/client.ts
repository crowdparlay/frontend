// @ts-nocheck

// Crowd Parlay API v1
// ---
// This file is automatically generated by openapi with preset effector-openapi-preset
// Do not edit this file directly. Instead open openapi config file and follow the link in "file"
import { createEffect } from 'effector';
import * as typed from 'typed-contracts';
import { requestFx } from './request';

//#region prebuilt code
const custom = { any: (valueName: string, value: unknown): any => value }

export type GenericErrors =
  | {
      status: 'unexpected';
      error: Error;
    }
  | {
      status: 'unknown_status';
      error: { status: number; body: unknown };
    }
  | {
      status: 'validation_error';
      error: typed.ValidationError;
    };

type ErrorCodes = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 500 | 501 | 502 | 503 | 505;
/**
 * @throws
 */
function parseByStatus<
  Variants extends string,
  Contracts extends Record<number, [Variants, typed.Contract<any>]>,
  Result extends {
    [Code in keyof Contracts]: Contracts[Code] extends [infer Status, typed.Contract<infer T>]
      ? { status: Status; answer: T }
      : never;
  }
>(
  name: string,
  response: { status: number; body?: unknown },
  contracts: Contracts,
): Result[Exclude<keyof Result, ErrorCodes>] {
  const contractObject = contracts[response.status];
  if (!contractObject) {
    throw {
      status: 'unknown_status',
      error: {
        status: response.status,
        body: response.body,
      },
    };
  }
  const [status, contract] = contractObject;
  const answer = contract(name, response.body);
  if (answer instanceof typed.ValidationError) {
    throw { status: 'validation_error', error: answer };
  }
  if (response.status >= 400) {
    throw { status, error: answer };
  }
  return { status, answer } as Result[Exclude<keyof Result, ErrorCodes>];
}

function convertBodyToUrlSearchParams(body: Record<string, any>): URLSearchParams {
  function flattenObject(obj: any, parent: string = '', res: Record<string, string> = {}): Record<string, string> {
    for (let key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        const propName = parent ? `${parent}[${key}]` : key;
        if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
          flattenObject(obj[key], propName, res);
        } else {
          res[propName] = String(obj[key]);
        }
      }
    }
    return res;
  }

  const flatBody = flattenObject(body);
  return new URLSearchParams(flatBody);
}

//#endregion prebuilt code/* --- */
//#region apiV1CommentsCommentIdGet
export type ApiV1CommentsCommentIdGet = {
  path: {
    commentId: string;
  };
};
/* OK */
export const apiV1CommentsCommentIdGetOk = typed.object({
  id: typed.string,
  content: typed.string,
  author: typed.intersection(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })).maybe,
  created_at: typed.string,
  reply_count: typed.number,
  first_replies_authors: typed.array(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })),
  reaction_counters: typed.object({}),
  viewer_reactions: typed.array(typed.string)
});
export type ApiV1CommentsCommentIdGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1CommentsCommentIdGetOk>;
};
/* Not Found */
export const apiV1CommentsCommentIdGetNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1CommentsCommentIdGetInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1CommentsCommentIdGetFail = {
  status: "not_found";
  error: typed.Get<typeof apiV1CommentsCommentIdGetNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1CommentsCommentIdGetInternalServerError>;
} | GenericErrors;
export const apiV1CommentsCommentIdGetFx = createEffect<ApiV1CommentsCommentIdGet, ApiV1CommentsCommentIdGetDone, ApiV1CommentsCommentIdGetFail>({
  async handler({
    path
  }) {
    const name = "apiV1CommentsCommentIdGetFx.body";
    const response = await requestFx({
      path: `/api/v1/comments/${path.commentId}`,
      method: "GET"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1CommentsCommentIdGetOk],
      404: ["not_found", apiV1CommentsCommentIdGetNotFound],
      500: ["internal_server_error", apiV1CommentsCommentIdGetInternalServerError]
    });
  }
});
//#endregion apiV1CommentsCommentIdGet

/* --- */
//#region apiV1CommentsGet
export type ApiV1CommentsGet = {
  query: {
    discussionId?: string;
    authorId?: string;
    offset: number;
    count: number;
  };
};
/* OK */
export const apiV1CommentsGetOk = typed.object({
  total_count: typed.number,
  items: typed.array(typed.object({
    id: typed.string,
    content: typed.string,
    author: typed.intersection(typed.object({
      id: typed.string,
      username: typed.string,
      display_name: typed.string,
      avatar_url: typed.string.maybe
    })).maybe,
    created_at: typed.string,
    reply_count: typed.number,
    first_replies_authors: typed.array(typed.object({
      id: typed.string,
      username: typed.string,
      display_name: typed.string,
      avatar_url: typed.string.maybe
    })),
    reaction_counters: typed.object({}),
    viewer_reactions: typed.array(typed.string)
  }))
});
export type ApiV1CommentsGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1CommentsGetOk>;
};
/* Bad Request */
export const apiV1CommentsGetBadRequest = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe,
  errors: typed.object({}).optional
});
/* Internal Server Error */
export const apiV1CommentsGetInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1CommentsGetFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1CommentsGetBadRequest>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1CommentsGetInternalServerError>;
} | GenericErrors;
export const apiV1CommentsGetFx = createEffect<ApiV1CommentsGet, ApiV1CommentsGetDone, ApiV1CommentsGetFail>({
  async handler({
    query
  }) {
    const name = "apiV1CommentsGetFx.body";
    const response = await requestFx({
      path: "/api/v1/comments",
      method: "GET",
      query
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1CommentsGetOk],
      400: ["bad_request", apiV1CommentsGetBadRequest],
      500: ["internal_server_error", apiV1CommentsGetInternalServerError]
    });
  }
});
//#endregion apiV1CommentsGet

/* --- */
//#region apiV1CommentsPost
export type ApiV1CommentsPost = {
  body?: {
    discussion_id?: string;
    content?: string;
  };
};
/* Created */
export const apiV1CommentsPostCreated = typed.object({
  id: typed.string,
  content: typed.string,
  author: typed.intersection(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })).maybe,
  created_at: typed.string,
  reply_count: typed.number,
  first_replies_authors: typed.array(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })),
  reaction_counters: typed.object({}),
  viewer_reactions: typed.array(typed.string)
});
export type ApiV1CommentsPostDone = {
  status: "created";
  answer: typed.Get<typeof apiV1CommentsPostCreated>;
};
/* Bad Request */
export const apiV1CommentsPostBadRequest = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe,
  errors: typed.object({}).optional
});
/* Forbidden */
export const apiV1CommentsPostForbidden = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1CommentsPostInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1CommentsPostFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1CommentsPostBadRequest>;
} | {
  status: "forbidden";
  error: typed.Get<typeof apiV1CommentsPostForbidden>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1CommentsPostInternalServerError>;
} | GenericErrors;
export const apiV1CommentsPostFx = createEffect<ApiV1CommentsPost, ApiV1CommentsPostDone, ApiV1CommentsPostFail>({
  async handler({
    body
  }) {
    const name = "apiV1CommentsPostFx.body";
    const response = await requestFx({
      path: "/api/v1/comments",
      method: "POST",
      body
    });
    return parseByStatus(name, response, {
      201: ["created", apiV1CommentsPostCreated],
      400: ["bad_request", apiV1CommentsPostBadRequest],
      403: ["forbidden", apiV1CommentsPostForbidden],
      500: ["internal_server_error", apiV1CommentsPostInternalServerError]
    });
  }
});
//#endregion apiV1CommentsPost

/* --- */
//#region apiV1CommentsParentCommentIdRepliesGet
export type ApiV1CommentsParentCommentIdRepliesGet = {
  path: {
    parentCommentId: string;
  };
  query: {
    offset: number;
    count: number;
  };
};
/* OK */
export const apiV1CommentsParentCommentIdRepliesGetOk = typed.object({
  total_count: typed.number,
  items: typed.array(typed.object({
    id: typed.string,
    content: typed.string,
    author: typed.intersection(typed.object({
      id: typed.string,
      username: typed.string,
      display_name: typed.string,
      avatar_url: typed.string.maybe
    })).maybe,
    created_at: typed.string,
    reply_count: typed.number,
    first_replies_authors: typed.array(typed.object({
      id: typed.string,
      username: typed.string,
      display_name: typed.string,
      avatar_url: typed.string.maybe
    })),
    reaction_counters: typed.object({}),
    viewer_reactions: typed.array(typed.string)
  }))
});
export type ApiV1CommentsParentCommentIdRepliesGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1CommentsParentCommentIdRepliesGetOk>;
};
/* Bad Request */
export const apiV1CommentsParentCommentIdRepliesGetBadRequest = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe,
  errors: typed.object({}).optional
});
/* Not Found */
export const apiV1CommentsParentCommentIdRepliesGetNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1CommentsParentCommentIdRepliesGetInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1CommentsParentCommentIdRepliesGetFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesGetBadRequest>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesGetNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesGetInternalServerError>;
} | GenericErrors;
export const apiV1CommentsParentCommentIdRepliesGetFx = createEffect<ApiV1CommentsParentCommentIdRepliesGet, ApiV1CommentsParentCommentIdRepliesGetDone, ApiV1CommentsParentCommentIdRepliesGetFail>({
  async handler({
    path,
    query
  }) {
    const name = "apiV1CommentsParentCommentIdRepliesGetFx.body";
    const response = await requestFx({
      path: `/api/v1/comments/${path.parentCommentId}/replies`,
      method: "GET",
      query
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1CommentsParentCommentIdRepliesGetOk],
      400: ["bad_request", apiV1CommentsParentCommentIdRepliesGetBadRequest],
      404: ["not_found", apiV1CommentsParentCommentIdRepliesGetNotFound],
      500: ["internal_server_error", apiV1CommentsParentCommentIdRepliesGetInternalServerError]
    });
  }
});
//#endregion apiV1CommentsParentCommentIdRepliesGet

/* --- */
//#region apiV1CommentsParentCommentIdRepliesPost
export type ApiV1CommentsParentCommentIdRepliesPost = {
  body?: {
    content?: string;
  };
  path: {
    parentCommentId: string;
  };
};
/* Created */
export const apiV1CommentsParentCommentIdRepliesPostCreated = typed.object({
  id: typed.string,
  content: typed.string,
  author: typed.intersection(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })).maybe,
  created_at: typed.string,
  reply_count: typed.number,
  first_replies_authors: typed.array(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })),
  reaction_counters: typed.object({}),
  viewer_reactions: typed.array(typed.string)
});
export type ApiV1CommentsParentCommentIdRepliesPostDone = {
  status: "created";
  answer: typed.Get<typeof apiV1CommentsParentCommentIdRepliesPostCreated>;
};
/* Bad Request */
export const apiV1CommentsParentCommentIdRepliesPostBadRequest = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe,
  errors: typed.object({}).optional
});
/* Forbidden */
export const apiV1CommentsParentCommentIdRepliesPostForbidden = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Not Found */
export const apiV1CommentsParentCommentIdRepliesPostNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1CommentsParentCommentIdRepliesPostInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1CommentsParentCommentIdRepliesPostFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesPostBadRequest>;
} | {
  status: "forbidden";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesPostForbidden>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesPostNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1CommentsParentCommentIdRepliesPostInternalServerError>;
} | GenericErrors;
export const apiV1CommentsParentCommentIdRepliesPostFx = createEffect<ApiV1CommentsParentCommentIdRepliesPost, ApiV1CommentsParentCommentIdRepliesPostDone, ApiV1CommentsParentCommentIdRepliesPostFail>({
  async handler({
    body,
    path
  }) {
    const name = "apiV1CommentsParentCommentIdRepliesPostFx.body";
    const response = await requestFx({
      path: `/api/v1/comments/${path.parentCommentId}/replies`,
      method: "POST",
      body
    });
    return parseByStatus(name, response, {
      201: ["created", apiV1CommentsParentCommentIdRepliesPostCreated],
      400: ["bad_request", apiV1CommentsParentCommentIdRepliesPostBadRequest],
      403: ["forbidden", apiV1CommentsParentCommentIdRepliesPostForbidden],
      404: ["not_found", apiV1CommentsParentCommentIdRepliesPostNotFound],
      500: ["internal_server_error", apiV1CommentsParentCommentIdRepliesPostInternalServerError]
    });
  }
});
//#endregion apiV1CommentsParentCommentIdRepliesPost

/* --- */
//#region apiV1CommentsCommentIdReactionsPost
export type ApiV1CommentsCommentIdReactionsPost = {
  body?: string[];
  path: {
    commentId: string;
  };
};
/* No Content */
export const apiV1CommentsCommentIdReactionsPostNoContent = typed.string;
export type ApiV1CommentsCommentIdReactionsPostDone = {
  status: "no_content";
  answer: typed.Get<typeof apiV1CommentsCommentIdReactionsPostNoContent>;
};
/* Bad Request */
export const apiV1CommentsCommentIdReactionsPostBadRequest = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe,
  errors: typed.object({}).optional
});
/* Forbidden */
export const apiV1CommentsCommentIdReactionsPostForbidden = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Not Found */
export const apiV1CommentsCommentIdReactionsPostNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1CommentsCommentIdReactionsPostInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1CommentsCommentIdReactionsPostFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1CommentsCommentIdReactionsPostBadRequest>;
} | {
  status: "forbidden";
  error: typed.Get<typeof apiV1CommentsCommentIdReactionsPostForbidden>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1CommentsCommentIdReactionsPostNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1CommentsCommentIdReactionsPostInternalServerError>;
} | GenericErrors;
export const apiV1CommentsCommentIdReactionsPostFx = createEffect<ApiV1CommentsCommentIdReactionsPost, ApiV1CommentsCommentIdReactionsPostDone, ApiV1CommentsCommentIdReactionsPostFail>({
  async handler({
    body,
    path
  }) {
    const name = "apiV1CommentsCommentIdReactionsPostFx.body";
    const response = await requestFx({
      path: `/api/v1/comments/${path.commentId}/reactions`,
      method: "POST",
      body
    });
    return parseByStatus(name, response, {
      204: ["no_content", apiV1CommentsCommentIdReactionsPostNoContent],
      400: ["bad_request", apiV1CommentsCommentIdReactionsPostBadRequest],
      403: ["forbidden", apiV1CommentsCommentIdReactionsPostForbidden],
      404: ["not_found", apiV1CommentsCommentIdReactionsPostNotFound],
      500: ["internal_server_error", apiV1CommentsCommentIdReactionsPostInternalServerError]
    });
  }
});
//#endregion apiV1CommentsCommentIdReactionsPost

/* --- */
//#region apiV1DiscussionsDiscussionIdGet
export type ApiV1DiscussionsDiscussionIdGet = {
  path: {
    discussionId: string;
  };
};
/* OK */
export const apiV1DiscussionsDiscussionIdGetOk = typed.object({
  id: typed.string,
  title: typed.string,
  description: typed.string,
  author: typed.intersection(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })).maybe,
  created_at: typed.string,
  reaction_counters: typed.object({}),
  viewer_reactions: typed.array(typed.string)
});
export type ApiV1DiscussionsDiscussionIdGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1DiscussionsDiscussionIdGetOk>;
};
/* Not Found */
export const apiV1DiscussionsDiscussionIdGetNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1DiscussionsDiscussionIdGetInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1DiscussionsDiscussionIdGetFail = {
  status: "not_found";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdGetNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdGetInternalServerError>;
} | GenericErrors;
export const apiV1DiscussionsDiscussionIdGetFx = createEffect<ApiV1DiscussionsDiscussionIdGet, ApiV1DiscussionsDiscussionIdGetDone, ApiV1DiscussionsDiscussionIdGetFail>({
  async handler({
    path
  }) {
    const name = "apiV1DiscussionsDiscussionIdGetFx.body";
    const response = await requestFx({
      path: `/api/v1/discussions/${path.discussionId}`,
      method: "GET"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1DiscussionsDiscussionIdGetOk],
      404: ["not_found", apiV1DiscussionsDiscussionIdGetNotFound],
      500: ["internal_server_error", apiV1DiscussionsDiscussionIdGetInternalServerError]
    });
  }
});
//#endregion apiV1DiscussionsDiscussionIdGet

/* --- */
//#region apiV1DiscussionsDiscussionIdPatch
export type ApiV1DiscussionsDiscussionIdPatch = {
  body?: {
    title?: string | null;
    description?: string | null;
  };
  path: {
    discussionId: string;
  };
};
/* OK */
export const apiV1DiscussionsDiscussionIdPatchOk = typed.object({
  id: typed.string,
  title: typed.string,
  description: typed.string,
  author: typed.intersection(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })).maybe,
  created_at: typed.string,
  reaction_counters: typed.object({}),
  viewer_reactions: typed.array(typed.string)
});
export type ApiV1DiscussionsDiscussionIdPatchDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1DiscussionsDiscussionIdPatchOk>;
};
/* Forbidden */
export const apiV1DiscussionsDiscussionIdPatchForbidden = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Not Found */
export const apiV1DiscussionsDiscussionIdPatchNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1DiscussionsDiscussionIdPatchInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1DiscussionsDiscussionIdPatchFail = {
  status: "forbidden";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdPatchForbidden>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdPatchNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdPatchInternalServerError>;
} | GenericErrors;
export const apiV1DiscussionsDiscussionIdPatchFx = createEffect<ApiV1DiscussionsDiscussionIdPatch, ApiV1DiscussionsDiscussionIdPatchDone, ApiV1DiscussionsDiscussionIdPatchFail>({
  async handler({
    body,
    path
  }) {
    const name = "apiV1DiscussionsDiscussionIdPatchFx.body";
    const response = await requestFx({
      path: `/api/v1/discussions/${path.discussionId}`,
      method: "PATCH",
      body
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1DiscussionsDiscussionIdPatchOk],
      403: ["forbidden", apiV1DiscussionsDiscussionIdPatchForbidden],
      404: ["not_found", apiV1DiscussionsDiscussionIdPatchNotFound],
      500: ["internal_server_error", apiV1DiscussionsDiscussionIdPatchInternalServerError]
    });
  }
});
//#endregion apiV1DiscussionsDiscussionIdPatch

/* --- */
//#region apiV1DiscussionsGet
export type ApiV1DiscussionsGet = {
  query: {
    authorId?: string;
    offset: number;
    count: number;
  };
};
/* OK */
export const apiV1DiscussionsGetOk = typed.object({
  total_count: typed.number,
  items: typed.array(typed.object({
    id: typed.string,
    title: typed.string,
    description: typed.string,
    author: typed.intersection(typed.object({
      id: typed.string,
      username: typed.string,
      display_name: typed.string,
      avatar_url: typed.string.maybe
    })).maybe,
    created_at: typed.string,
    reaction_counters: typed.object({}),
    viewer_reactions: typed.array(typed.string)
  }))
});
export type ApiV1DiscussionsGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1DiscussionsGetOk>;
};
/* Internal Server Error */
export const apiV1DiscussionsGetInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1DiscussionsGetFail = {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1DiscussionsGetInternalServerError>;
} | GenericErrors;
export const apiV1DiscussionsGetFx = createEffect<ApiV1DiscussionsGet, ApiV1DiscussionsGetDone, ApiV1DiscussionsGetFail>({
  async handler({
    query
  }) {
    const name = "apiV1DiscussionsGetFx.body";
    const response = await requestFx({
      path: "/api/v1/discussions",
      method: "GET",
      query
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1DiscussionsGetOk],
      500: ["internal_server_error", apiV1DiscussionsGetInternalServerError]
    });
  }
});
//#endregion apiV1DiscussionsGet

/* --- */
//#region apiV1DiscussionsPost
export type ApiV1DiscussionsPost = {
  body?: {
    title?: string;
    description?: string;
  };
};
/* Created */
export const apiV1DiscussionsPostCreated = typed.object({
  id: typed.string,
  title: typed.string,
  description: typed.string,
  author: typed.intersection(typed.object({
    id: typed.string,
    username: typed.string,
    display_name: typed.string,
    avatar_url: typed.string.maybe
  })).maybe,
  created_at: typed.string,
  reaction_counters: typed.object({}),
  viewer_reactions: typed.array(typed.string)
});
export type ApiV1DiscussionsPostDone = {
  status: "created";
  answer: typed.Get<typeof apiV1DiscussionsPostCreated>;
};
/* Forbidden */
export const apiV1DiscussionsPostForbidden = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1DiscussionsPostInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1DiscussionsPostFail = {
  status: "forbidden";
  error: typed.Get<typeof apiV1DiscussionsPostForbidden>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1DiscussionsPostInternalServerError>;
} | GenericErrors;
export const apiV1DiscussionsPostFx = createEffect<ApiV1DiscussionsPost, ApiV1DiscussionsPostDone, ApiV1DiscussionsPostFail>({
  async handler({
    body
  }) {
    const name = "apiV1DiscussionsPostFx.body";
    const response = await requestFx({
      path: "/api/v1/discussions",
      method: "POST",
      body
    });
    return parseByStatus(name, response, {
      201: ["created", apiV1DiscussionsPostCreated],
      403: ["forbidden", apiV1DiscussionsPostForbidden],
      500: ["internal_server_error", apiV1DiscussionsPostInternalServerError]
    });
  }
});
//#endregion apiV1DiscussionsPost

/* --- */
//#region apiV1DiscussionsDiscussionIdReactionsPost
export type ApiV1DiscussionsDiscussionIdReactionsPost = {
  body?: string[];
  path: {
    discussionId: string;
  };
};
/* No Content */
export const apiV1DiscussionsDiscussionIdReactionsPostNoContent = typed.nul;
export type ApiV1DiscussionsDiscussionIdReactionsPostDone = {
  status: "no_content";
  answer: typed.Get<typeof apiV1DiscussionsDiscussionIdReactionsPostNoContent>;
};
/* Bad Request */
export const apiV1DiscussionsDiscussionIdReactionsPostBadRequest = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe,
  errors: typed.object({}).optional
});
/* Forbidden */
export const apiV1DiscussionsDiscussionIdReactionsPostForbidden = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Not Found */
export const apiV1DiscussionsDiscussionIdReactionsPostNotFound = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
/* Internal Server Error */
export const apiV1DiscussionsDiscussionIdReactionsPostInternalServerError = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1DiscussionsDiscussionIdReactionsPostFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdReactionsPostBadRequest>;
} | {
  status: "forbidden";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdReactionsPostForbidden>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdReactionsPostNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1DiscussionsDiscussionIdReactionsPostInternalServerError>;
} | GenericErrors;
export const apiV1DiscussionsDiscussionIdReactionsPostFx = createEffect<ApiV1DiscussionsDiscussionIdReactionsPost, ApiV1DiscussionsDiscussionIdReactionsPostDone, ApiV1DiscussionsDiscussionIdReactionsPostFail>({
  async handler({
    body,
    path
  }) {
    const name = "apiV1DiscussionsDiscussionIdReactionsPostFx.body";
    const response = await requestFx({
      path: `/api/v1/discussions/${path.discussionId}/reactions`,
      method: "POST",
      body
    });
    return parseByStatus(name, response, {
      204: ["no_content", apiV1DiscussionsDiscussionIdReactionsPostNoContent],
      400: ["bad_request", apiV1DiscussionsDiscussionIdReactionsPostBadRequest],
      403: ["forbidden", apiV1DiscussionsDiscussionIdReactionsPostForbidden],
      404: ["not_found", apiV1DiscussionsDiscussionIdReactionsPostNotFound],
      500: ["internal_server_error", apiV1DiscussionsDiscussionIdReactionsPostInternalServerError]
    });
  }
});
//#endregion apiV1DiscussionsDiscussionIdReactionsPost

/* --- */
//#region apiV1LookupReactionsGet
export type ApiV1LookupReactionsGet = {};
/* OK */
export const apiV1LookupReactionsGetOk = typed.array(typed.string);
export type ApiV1LookupReactionsGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1LookupReactionsGetOk>;
};
export type ApiV1LookupReactionsGetFail = GenericErrors;
export const apiV1LookupReactionsGetFx = createEffect<ApiV1LookupReactionsGet, ApiV1LookupReactionsGetDone, ApiV1LookupReactionsGetFail>({
  async handler() {
    const name = "apiV1LookupReactionsGetFx.body";
    const response = await requestFx({
      path: "/api/v1/lookup/reactions",
      method: "GET"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1LookupReactionsGetOk]
    });
  }
});
//#endregion apiV1LookupReactionsGet

/* --- */
//#region apiV1AuthenticationSignInPost
export type ApiV1AuthenticationSignInPost = {
  body?: {
    usernameOrEmail?: string;
    password?: string;
  };
};
/* OK */
export const apiV1AuthenticationSignInPostOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1AuthenticationSignInPostDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1AuthenticationSignInPostOk>;
};
/* Unauthorized */
export const apiV1AuthenticationSignInPostUnauthorized = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1AuthenticationSignInPostInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1AuthenticationSignInPostFail = {
  status: "unauthorized";
  error: typed.Get<typeof apiV1AuthenticationSignInPostUnauthorized>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1AuthenticationSignInPostInternalServerError>;
} | GenericErrors;
export const apiV1AuthenticationSignInPostFx = createEffect<ApiV1AuthenticationSignInPost, ApiV1AuthenticationSignInPostDone, ApiV1AuthenticationSignInPostFail>({
  async handler({
    body
  }) {
    const name = "apiV1AuthenticationSignInPostFx.body";
    const response = await requestFx({
      path: "/api/v1/authentication/sign-in",
      method: "POST",
      body: convertBodyToUrlSearchParams(body)
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1AuthenticationSignInPostOk],
      401: ["unauthorized", apiV1AuthenticationSignInPostUnauthorized],
      500: ["internal_server_error", apiV1AuthenticationSignInPostInternalServerError]
    });
  }
});
//#endregion apiV1AuthenticationSignInPost

/* --- */
//#region apiV1AuthenticationSignOutPost
export type ApiV1AuthenticationSignOutPost = {};
/* OK */
export const apiV1AuthenticationSignOutPostOk = typed.nul;
export type ApiV1AuthenticationSignOutPostDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1AuthenticationSignOutPostOk>;
};
/* Unauthorized */
export const apiV1AuthenticationSignOutPostUnauthorized = typed.object({
  type: typed.string.maybe,
  title: typed.string.maybe,
  status: typed.number.maybe,
  detail: typed.string.maybe,
  instance: typed.string.maybe
});
export type ApiV1AuthenticationSignOutPostFail = {
  status: "unauthorized";
  error: typed.Get<typeof apiV1AuthenticationSignOutPostUnauthorized>;
} | GenericErrors;
export const apiV1AuthenticationSignOutPostFx = createEffect<ApiV1AuthenticationSignOutPost, ApiV1AuthenticationSignOutPostDone, ApiV1AuthenticationSignOutPostFail>({
  async handler() {
    const name = "apiV1AuthenticationSignOutPostFx.body";
    const response = await requestFx({
      path: "/api/v1/authentication/sign-out",
      method: "POST"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1AuthenticationSignOutPostOk],
      401: ["unauthorized", apiV1AuthenticationSignOutPostUnauthorized]
    });
  }
});
//#endregion apiV1AuthenticationSignOutPost

/* --- */
//#region apiV1AuthenticationSsoGoogleGet
export type ApiV1AuthenticationSsoGoogleGet = {
  query?: {
    returnUrl?: string;
  };
};
/* Found */
export const apiV1AuthenticationSsoGoogleGetFound = typed.nul;
export type ApiV1AuthenticationSsoGoogleGetDone = {
  status: "found";
  answer: typed.Get<typeof apiV1AuthenticationSsoGoogleGetFound>;
};
export type ApiV1AuthenticationSsoGoogleGetFail = GenericErrors;
export const apiV1AuthenticationSsoGoogleGetFx = createEffect<ApiV1AuthenticationSsoGoogleGet, ApiV1AuthenticationSsoGoogleGetDone, ApiV1AuthenticationSsoGoogleGetFail>({
  async handler({
    query
  }) {
    const name = "apiV1AuthenticationSsoGoogleGetFx.body";
    const response = await requestFx({
      path: "/api/v1/authentication/sso/google",
      method: "GET",
      query
    });
    return parseByStatus(name, response, {
      302: ["found", apiV1AuthenticationSsoGoogleGetFound]
    });
  }
});
//#endregion apiV1AuthenticationSsoGoogleGet

/* --- */
//#region apiV1AuthenticationSignInGoogleCallbackGet
export type ApiV1AuthenticationSignInGoogleCallbackGet = {
  query?: {
    code?: string;
    state?: string;
  };
};
/* OK */
export const apiV1AuthenticationSignInGoogleCallbackGetOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  avatar_url: typed.string.maybe
});
/* Found */
export const apiV1AuthenticationSignInGoogleCallbackGetFound = typed.nul;
export type ApiV1AuthenticationSignInGoogleCallbackGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1AuthenticationSignInGoogleCallbackGetOk>;
} | {
  status: "found";
  answer: typed.Get<typeof apiV1AuthenticationSignInGoogleCallbackGetFound>;
};
/* Bad Request */
export const apiV1AuthenticationSignInGoogleCallbackGetBadRequest = typed.object({
  error_description: typed.string.optional,
  validation_errors: typed.object({}).optional
});
/* Unauthorized */
export const apiV1AuthenticationSignInGoogleCallbackGetUnauthorized = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1AuthenticationSignInGoogleCallbackGetInternalServerError = typed.object({
  error_description: typed.string.optional
});
/* Service Unavailable */
export const apiV1AuthenticationSignInGoogleCallbackGetServiceUnavailable = typed.object({
  error_description: typed.string.optional
});
export type ApiV1AuthenticationSignInGoogleCallbackGetFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1AuthenticationSignInGoogleCallbackGetBadRequest>;
} | {
  status: "unauthorized";
  error: typed.Get<typeof apiV1AuthenticationSignInGoogleCallbackGetUnauthorized>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1AuthenticationSignInGoogleCallbackGetInternalServerError>;
} | {
  status: "service_unavailable";
  error: typed.Get<typeof apiV1AuthenticationSignInGoogleCallbackGetServiceUnavailable>;
} | GenericErrors;
export const apiV1AuthenticationSignInGoogleCallbackGetFx = createEffect<ApiV1AuthenticationSignInGoogleCallbackGet, ApiV1AuthenticationSignInGoogleCallbackGetDone, ApiV1AuthenticationSignInGoogleCallbackGetFail>({
  async handler({
    query
  }) {
    const name = "apiV1AuthenticationSignInGoogleCallbackGetFx.body";
    const response = await requestFx({
      path: "/api/v1/authentication/sign-in-google-callback",
      method: "GET",
      query
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1AuthenticationSignInGoogleCallbackGetOk],
      302: ["found", apiV1AuthenticationSignInGoogleCallbackGetFound],
      400: ["bad_request", apiV1AuthenticationSignInGoogleCallbackGetBadRequest],
      401: ["unauthorized", apiV1AuthenticationSignInGoogleCallbackGetUnauthorized],
      500: ["internal_server_error", apiV1AuthenticationSignInGoogleCallbackGetInternalServerError],
      503: ["service_unavailable", apiV1AuthenticationSignInGoogleCallbackGetServiceUnavailable]
    });
  }
});
//#endregion apiV1AuthenticationSignInGoogleCallbackGet

/* --- */
//#region apiV1UsersRegisterPost
export type ApiV1UsersRegisterPost = {
  body?: {
    username?: string;
    display_name?: string;
    email?: string | null;
    password?: string | null;
    avatar_url?: string | null;
    external_login_ticket_id?: string | null;
  };
};
/* OK */
export const apiV1UsersRegisterPostOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  email: typed.string.optional,
  display_name: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1UsersRegisterPostDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1UsersRegisterPostOk>;
};
/* Bad Request */
export const apiV1UsersRegisterPostBadRequest = typed.object({
  error_description: typed.string.optional,
  validation_errors: typed.object({}).optional
});
/* Forbidden */
export const apiV1UsersRegisterPostForbidden = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1UsersRegisterPostInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1UsersRegisterPostFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1UsersRegisterPostBadRequest>;
} | {
  status: "forbidden";
  error: typed.Get<typeof apiV1UsersRegisterPostForbidden>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1UsersRegisterPostInternalServerError>;
} | GenericErrors;
export const apiV1UsersRegisterPostFx = createEffect<ApiV1UsersRegisterPost, ApiV1UsersRegisterPostDone, ApiV1UsersRegisterPostFail>({
  async handler({
    body
  }) {
    const name = "apiV1UsersRegisterPostFx.body";
    const response = await requestFx({
      path: "/api/v1/users/register",
      method: "POST",
      body
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1UsersRegisterPostOk],
      400: ["bad_request", apiV1UsersRegisterPostBadRequest],
      403: ["forbidden", apiV1UsersRegisterPostForbidden],
      500: ["internal_server_error", apiV1UsersRegisterPostInternalServerError]
    });
  }
});
//#endregion apiV1UsersRegisterPost

/* --- */
//#region apiV1UsersUserIdGet
export type ApiV1UsersUserIdGet = {
  path: {
    userId: string;
  };
};
/* OK */
export const apiV1UsersUserIdGetOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1UsersUserIdGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1UsersUserIdGetOk>;
};
/* Not Found */
export const apiV1UsersUserIdGetNotFound = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1UsersUserIdGetInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1UsersUserIdGetFail = {
  status: "not_found";
  error: typed.Get<typeof apiV1UsersUserIdGetNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1UsersUserIdGetInternalServerError>;
} | GenericErrors;
export const apiV1UsersUserIdGetFx = createEffect<ApiV1UsersUserIdGet, ApiV1UsersUserIdGetDone, ApiV1UsersUserIdGetFail>({
  async handler({
    path
  }) {
    const name = "apiV1UsersUserIdGetFx.body";
    const response = await requestFx({
      path: `/api/v1/users/${path.userId}`,
      method: "GET"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1UsersUserIdGetOk],
      404: ["not_found", apiV1UsersUserIdGetNotFound],
      500: ["internal_server_error", apiV1UsersUserIdGetInternalServerError]
    });
  }
});
//#endregion apiV1UsersUserIdGet

/* --- */
//#region apiV1UsersUserIdPut
export type ApiV1UsersUserIdPut = {
  body?: {
    username?: string | null;
    display_name?: string | null;
    email?: string | null;
    avatar_url?: string | null;
    old_password?: string | null;
    new_password?: string | null;
  };
  path: {
    userId: string;
  };
};
/* OK */
export const apiV1UsersUserIdPutOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  email: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1UsersUserIdPutDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1UsersUserIdPutOk>;
};
/* Bad Request */
export const apiV1UsersUserIdPutBadRequest = typed.object({
  error_description: typed.string.optional,
  validation_errors: typed.object({}).optional
});
/* Forbidden */
export const apiV1UsersUserIdPutForbidden = typed.object({
  error_description: typed.string.optional
});
/* Not Found */
export const apiV1UsersUserIdPutNotFound = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1UsersUserIdPutInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1UsersUserIdPutFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1UsersUserIdPutBadRequest>;
} | {
  status: "forbidden";
  error: typed.Get<typeof apiV1UsersUserIdPutForbidden>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1UsersUserIdPutNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1UsersUserIdPutInternalServerError>;
} | GenericErrors;
export const apiV1UsersUserIdPutFx = createEffect<ApiV1UsersUserIdPut, ApiV1UsersUserIdPutDone, ApiV1UsersUserIdPutFail>({
  async handler({
    body,
    path
  }) {
    const name = "apiV1UsersUserIdPutFx.body";
    const response = await requestFx({
      path: `/api/v1/users/${path.userId}`,
      method: "PUT",
      body
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1UsersUserIdPutOk],
      400: ["bad_request", apiV1UsersUserIdPutBadRequest],
      403: ["forbidden", apiV1UsersUserIdPutForbidden],
      404: ["not_found", apiV1UsersUserIdPutNotFound],
      500: ["internal_server_error", apiV1UsersUserIdPutInternalServerError]
    });
  }
});
//#endregion apiV1UsersUserIdPut

/* --- */
//#region apiV1UsersUserIdDelete
export type ApiV1UsersUserIdDelete = {
  path: {
    userId: string;
  };
};
/* OK */
export const apiV1UsersUserIdDeleteOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  email: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1UsersUserIdDeleteDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1UsersUserIdDeleteOk>;
};
/* Forbidden */
export const apiV1UsersUserIdDeleteForbidden = typed.object({
  error_description: typed.string.optional
});
/* Not Found */
export const apiV1UsersUserIdDeleteNotFound = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1UsersUserIdDeleteInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1UsersUserIdDeleteFail = {
  status: "forbidden";
  error: typed.Get<typeof apiV1UsersUserIdDeleteForbidden>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1UsersUserIdDeleteNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1UsersUserIdDeleteInternalServerError>;
} | GenericErrors;
export const apiV1UsersUserIdDeleteFx = createEffect<ApiV1UsersUserIdDelete, ApiV1UsersUserIdDeleteDone, ApiV1UsersUserIdDeleteFail>({
  async handler({
    path
  }) {
    const name = "apiV1UsersUserIdDeleteFx.body";
    const response = await requestFx({
      path: `/api/v1/users/${path.userId}`,
      method: "DELETE"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1UsersUserIdDeleteOk],
      403: ["forbidden", apiV1UsersUserIdDeleteForbidden],
      404: ["not_found", apiV1UsersUserIdDeleteNotFound],
      500: ["internal_server_error", apiV1UsersUserIdDeleteInternalServerError]
    });
  }
});
//#endregion apiV1UsersUserIdDelete

/* --- */
//#region apiV1UsersSelfGet
export type ApiV1UsersSelfGet = {};
/* OK */
export const apiV1UsersSelfGetOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1UsersSelfGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1UsersSelfGetOk>;
};
/* Not Found */
export const apiV1UsersSelfGetNotFound = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1UsersSelfGetInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1UsersSelfGetFail = {
  status: "not_found";
  error: typed.Get<typeof apiV1UsersSelfGetNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1UsersSelfGetInternalServerError>;
} | GenericErrors;
export const apiV1UsersSelfGetFx = createEffect<ApiV1UsersSelfGet, ApiV1UsersSelfGetDone, ApiV1UsersSelfGetFail>({
  async handler() {
    const name = "apiV1UsersSelfGetFx.body";
    const response = await requestFx({
      path: "/api/v1/users/self",
      method: "GET"
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1UsersSelfGetOk],
      404: ["not_found", apiV1UsersSelfGetNotFound],
      500: ["internal_server_error", apiV1UsersSelfGetInternalServerError]
    });
  }
});
//#endregion apiV1UsersSelfGet

/* --- */
//#region apiV1UsersResolveGet
export type ApiV1UsersResolveGet = {
  query?: {
    username?: string;
  };
};
/* OK */
export const apiV1UsersResolveGetOk = typed.object({
  id: typed.string.optional,
  username: typed.string.optional,
  display_name: typed.string.optional,
  avatar_url: typed.string.maybe
});
export type ApiV1UsersResolveGetDone = {
  status: "ok";
  answer: typed.Get<typeof apiV1UsersResolveGetOk>;
};
/* Bad Request */
export const apiV1UsersResolveGetBadRequest = typed.object({
  error_description: typed.string.optional,
  validation_errors: typed.object({}).optional
});
/* Not Found */
export const apiV1UsersResolveGetNotFound = typed.object({
  error_description: typed.string.optional
});
/* Internal Server Error */
export const apiV1UsersResolveGetInternalServerError = typed.object({
  error_description: typed.string.optional
});
export type ApiV1UsersResolveGetFail = {
  status: "bad_request";
  error: typed.Get<typeof apiV1UsersResolveGetBadRequest>;
} | {
  status: "not_found";
  error: typed.Get<typeof apiV1UsersResolveGetNotFound>;
} | {
  status: "internal_server_error";
  error: typed.Get<typeof apiV1UsersResolveGetInternalServerError>;
} | GenericErrors;
export const apiV1UsersResolveGetFx = createEffect<ApiV1UsersResolveGet, ApiV1UsersResolveGetDone, ApiV1UsersResolveGetFail>({
  async handler({
    query
  }) {
    const name = "apiV1UsersResolveGetFx.body";
    const response = await requestFx({
      path: "/api/v1/users/resolve",
      method: "GET",
      query
    });
    return parseByStatus(name, response, {
      200: ["ok", apiV1UsersResolveGetOk],
      400: ["bad_request", apiV1UsersResolveGetBadRequest],
      404: ["not_found", apiV1UsersResolveGetNotFound],
      500: ["internal_server_error", apiV1UsersResolveGetInternalServerError]
    });
  }
});
//#endregion apiV1UsersResolveGet

