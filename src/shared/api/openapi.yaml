openapi: 3.0.1
info:
  title: Crowd Parlay API
  description: Crowd Parlay's RESTful API.
  version: '1.0'
servers:
  - url: http://localhost:8080
tags:
  - name: Users
    x-displayName: Users
  - name: Authors
    x-displayName: Authors
  - name: Comments
    x-displayName: Comments
paths:
  /api/v1/users/register:
    post:
      tags:
        - Users
      summary: Creates a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersRegisterRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UsersRegisterRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UsersRegisterRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersRegisterResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRegisterResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersRegisterResponse'
  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Returns user with the specified ID.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersGetByIdResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetByIdResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersGetByIdResponse'
    put:
      tags:
        - Users
      summary: Updates user with the specified ID.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UsersUpdateRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersUpdateResponse'
    delete:
      tags:
        - Users
      summary: Deletes user with the specified ID.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
  /api/v1/users/resolve:
    get:
      tags:
        - Users
      summary: Returns user with the specified username.
      parameters:
        - name: username
          in: query
          style: form
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UsersGetByUsernameResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetByUsernameResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/UsersGetByUsernameResponse'
  /api/v1/authors/{authorId}:
    get:
      tags:
        - Authors
      summary: Returns author with the specified ID.
      parameters:
        - name: authorId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthorDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
  /api/v1/comments/{commentId}:
    get:
      tags:
        - Comments
      summary: Returns comment with the specified ID.
      parameters:
        - name: commentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
  /api/v1/comments:
    get:
      tags:
        - Comments
      summary: Returns all comments created by author with the specified ID.
      parameters:
        - name: authorId
          in: query
          style: form
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDto'
    post:
      tags:
        - Comments
      summary: Creates a comment.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
  /api/v1/comments/{targetCommentId}/reply:
    post:
      tags:
        - Comments
      summary: Creates a reply to comment with the specified ID.
      parameters:
        - name: targetCommentId
          in: path
          required: true
          style: simple
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentDto'
components:
  schemas:
    UsersGetByIdResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersGetByUsernameResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersRegisterRequest:
      type: object
      properties:
        username:
          type: string
        display_name:
          type: string
        password:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersRegisterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    UsersUpdateRequest:
      type: object
      properties:
        username:
          type: string
          nullable: true
        display_name:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        old_password:
          type: string
          nullable: true
        new_password:
          type: string
          nullable: true
      additionalProperties: false
    UsersUpdateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
      additionalProperties: false
    AuthorDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        displayName:
          type: string
        avatarUrl:
          type: string
          nullable: true
      additionalProperties: false
    CommentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        author:
          $ref: '#/components/schemas/AuthorDto'
        createdAt:
          type: string
          format: date-time
        replyCount:
          type: integer
          format: int32
        firstRepliesAuthors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorDto'
      additionalProperties: false
    CommentRequest:
      type: object
      properties:
        content:
          type: string
      additionalProperties: false
  securitySchemes:
    OIDC:
      type: openIdConnect
      description: OpenID Connect authentication scheme.
      openIdConnectUrl: /.well-known/openid-configuration
x-tagGroups:
  - name: '1'
    tags:
      - Users
  - name: '2'
    tags:
      - Authors
      - Comments
